Руководство для контрибьюторов
==============================

Это руководство предназначено для разработчиков и пользователей, желающих внести вклад в развитие библиотеки **Marine Robotics Computer Vision (MRCV)**. Ниже представлены инструкции по установке зависимостей, сборке проекта и рекомендации по работе с CUDA.

Датасет изображений для работы с библиотекой доступен по ссылке:

`code-ai-400393-image-dataset.7z <https://disk.yandex.ru/d/TxReQ9J6PAo9Nw>`_

Получение исходного кода
~~~~~~~~~~~~~~~~~~~~~~~~

Исходный код библиотеки доступен на внутреннем репозитории. Клонируйте проект:

.. code-block:: bash

   git clone https://github.com/valabsoft/code-ai-400393.git
   cd mrcv

Необходимые зависимости
~~~~~~~~~~~~~~~~~~~~~~~~

Для корректной работы библиотеки на **Windows** все необходимые зависимости должны быть установлены и размещены следующим образом:

.. code-block:: none

   C:\
   ├───libtorch-12.4
   ├───libtorch-12.4-cuda
   ├───opencv-4.10.0-build
   ├───opencv-4.10.0-build-cuda
   └───yaml-cpp

Также необходимо добавить в системную переменную `PATH` пути к бинарным файлам обеих сборок OpenCV:

- C:\\opencv-4.10.0-build\\install\\x64\\vc17\\bin\\
- C:\\opencv-4.10.0-build-cuda\\install\\x64\\vc17\\bin\\

Настройка сборки
~~~~~~~~~~~~~~~~

В корневом `CMakeLists.txt` проекта имеется флаг:

.. code-block:: cmake

   option(USE_CUDA "Use CUDA Build" OFF)

Он определяет режим сборки библиотеки:

- `OFF` — сборка без поддержки CUDA. Используются OpenCV и LibTorch для CPU. CUDA-функции не будут доступны.
- `ON` — сборка с поддержкой CUDA. Используются OpenCV с модулями CUDA и LibTorch для CUDA. CUDA-функции активны в пространстве имён `mrcv::`.

Сборка с CUDA
~~~~~~~~~~~~~

Для включения поддержки CUDA необходимо:

1. Установить:

   - **CUDA Toolkit 12.4**
   - **cuDNN 9.3**

2. Скопировать содержимое `bin`, `lib` и `include` из папки cuDNN в каталог установки CUDA Toolkit.

.. important::

   После смены значения `USE_CUDA` обязательно удалите и пересоздайте директорию `build/`, иначе сборка завершится с ошибками.

.. code-block:: bash

   rd /s /q build
   mkdir build
   cd build
   cmake ..
   cmake --build . --config Release

При необходимости, скопируйте `*.dll` из используемой версии OpenCV или LibTorch в папку с исполняемыми файлами.

Инструкция по установке python версии библиотеки mrcv
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Проверьте, установлен ли Python::

    python3 --version

Если Python отсутствует, установите его::

    sudo apt-get update
    sudo apt-get install python3

Для клонирования репозитория с GitHub потребуется Git::

    git --version

Если Git не установлен, выполните::

    sudo apt-get install git

Склонируйте репозиторий с ветки developer::

    git clone -b developer https://github.com/valabsoft/code-ai-400393.git

Это создаст локальную копию репозитория на вашем устройстве.

Перейдите в локальный репозиторий::

    cd code-ai-400393/python

Рекомендуется использовать виртуальное окружение для изоляции зависимостей:

Создайте виртуальное окружение с именем venv::

    python3 -m venv venv

Активируйте окружение::

    source venv/bin/activate

После этого в терминале появится (venv), что указывает на активное окружение.

В директории есть файл requirements.txt с необходимыми библиотеками:

Если файл находится в корневой директории::

    pip install -r requirements.txt

Установите вашу библиотеку::

    pip install -e .

Перейдите в директорию с примерами

В директории есть папка examples::

    cd python/examples

Выберите папку модуля и запустите пример. Убедитесь, что в папке примера есть файлы с которыми будет работать пример::

    cd python/examples/comparing/
    python comparing.py

Оформление изменений
~~~~~~~~~~~~~~~~~~~~

Перед отправкой изменений:

1. **Форкните репозиторий** и создайте отдельную ветку для каждой задачи.
2. **Не объединяйте** несвязанные изменения в одном pull request.
3. **Багфиксы** — на ветках от стабильной версии; **новые фичи** — от `main`.

.. code-block:: bash

   git checkout -b fix-crash-in-detector main

4. Убедитесь, что вы:
   - написали/обновили тесты;
   - обновили документацию;
   - добавили вас в `CHANGELOG.md` (если он есть).

Репорты об ошибках
~~~~~~~~~~~~~~~~~~

Перед отправкой:

- Обновитесь до последней версии библиотеки.
- Проверьте, повторяется ли ошибка на старых версиях.
- Проверьте зависимости: версии OpenCV, LibTorch и др.
- Найдите похожие тикеты/обсуждения.

При оформлении тикета:

- Укажите ОС, версию компилятора, сборки библиотек.
- Приложите минимальный пример кода с воспроизведением ошибки.
- Включите логи и команды запуска.
  
Рекомендации по контрибьюции
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- Пишите понятный и документированный код.
- Используйте стиль оформления, принятый в библиотеке.
- Обновляйте документацию при добавлении новых функций.
- Проверяйте кросс-платформенность (Windows/Linux, CPU/CUDA).
- Перед публикацией изменений убедитесь, что они не нарушают сборку библиотеки.
