Модуль детекции изображений
===========================

*Модуль реализует полную архитектуру сверточной нейронной сети YOLO для задач детекции объектов. Предусмотрены функции обучения, валидации, предсказания, загрузки весов, работы с аннотациями, подготовки датасета, и визуализации результатов.*

Инициализация детектора
~~~~~~~~~~~~~~~~~~~~~~~
*Задает параметры устройства, загружает список меток и подготавливает модель для работы.*

.. code-block:: cpp

    void mrcv::Detector::Initialize(int gpuID, int width, int height, std::string nameListPath)

**Описание параметров:**

- ``gpuID`` — индекс устройства GPU (-1 — использовать CPU).
- ``width`` — ширина входного изображения (должна быть кратна 32).
- ``height`` — высота входного изображения (должна быть кратна 32).
- ``nameListPath`` — путь к файлу с названиями классов.

**Назначение:** загружает имена классов, настраивает вычислительное устройство и инициализирует модель ``YoloBody_tiny``.

Загрузка предобученной модели
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*Загружает веса модели из заданного файла.*

.. code-block:: cpp

    int mrcv::Detector::LoadPretrained(std::string pretrainedPath)

**Назначение:** частично загружает веса, исключая выходные слои ``yolo_head``, и копирует параметры в текущую модель.


Обучение модели
~~~~~~~~~~~~~~~
*Обучает модель на обучающем датасете.*

.. code-block:: cpp

    int mrcv::Detector::Train(std::string trainValPath, std::string imageType,
                              int numEpochs, int batchSize, float learningRate,
                              std::string savePath, std::string pretrainedPath)

**Назначение:**

- загружает датасет в формате XML,
- запускает цикл обучения и валидации,
- на каждом этапе сохраняет веса модели в ``savePath``,
- использует функции потерь ``YOLOLossImpl``.

**Внутренние зависимости:**

- ``DetDataset`` — загрузка и предобработка данных,
- ``YOLOLossImpl`` — расчёт функции потерь,
- ``YoloBody_tiny`` — модель YOLO.

Автоматический подбор гиперпараметров
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*Выполняет автоматический перебор комбинаций параметров обучения и выбирает наилучшие.*

.. code-block:: cpp

    int mrcv::Detector::AutoTrain(std::string trainValPath, std::string imageType,
                                  std::vector<int> epochsList, std::vector<int> batchSizes,
                                  std::vector<float> learningRates, std::string pretrainedPath,
                                  std::string savePath)

**Назначение:** выбирает комбинацию ``epochs``, ``batchSize`` и ``learningRate`` с минимальной ошибкой на валидации.

Предсказание и визуализация
~~~~~~~~~~~~~~~~~~~~~~~~~~~
*Выполняет предсказание объектов на изображении и сохраняет визуализацию.*

.. code-block:: cpp

    int mrcv::Detector::Predict(cv::Mat image, bool show, float confThresh, float nmsThresh)

**Назначение:**

- выполняет предсказание с использованием модели,
- масштабирует результат обратно к исходному изображению,
- применяет NMS (Non-Maximum Suppression),
- отображает или сохраняет результат визуализации (файл ``prediction.jpg``).

**Тип логирования:**

- ``LOGTYPE::INFO`` при успешной обработке,
- ``LOGTYPE::ERROR`` при ошибках устройства, путей и пр.

**Промежуточные функции:**

- ``DecodeBox`` — расшифровка выхода YOLO,
- ``nonMaximumSuppression`` — удаление пересекающихся боксов,
- ``showBbox`` — отображение результатов детекции.

Валидация модели
----------------
*Оценивает модель на отложенном датасете и возвращает среднюю ошибку.*

.. code-block:: cpp

    float mrcv::Detector::Validate(std::string valDataPath, std::string imageType, int batchSize)

**Назначение:** используется при автоматическом подборе гиперпараметров и в процессе отладки модели.
