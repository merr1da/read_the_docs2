Модуль расчета курса объекта
=============================

*Данный модуль реализует функционал для детекции объектов и расчета курса движения относительно обнаруженных целей с использованием нейронных сетей.*

Класс ObjCourse
~~~~~~~~~~~~~~~

**Основные функции:**

Инициализация нейронной сети
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
*Загружает модель нейронной сети и файл с классами объектов.*

.. code-block:: cpp

    int ObjCourse::initNN(const std::string pathToModel, const std::string pathToClasses)

**Параметры:**
- ``pathToModel`` - путь к файлу модели ONNX
- ``pathToClasses`` - путь к файлу с классами объектов

**Возвращаемые значения:**
- 0 - успешная инициализация
- ENETDOWN - ошибка загрузки модели
- ENOENT - ошибка загрузки файла классов

Основной процесс обработки
~~~~~~~~~~~~~~~~~~~~~~~~~~
*Выполняет полный цикл обработки изображения: предобработку, детекцию и постобработку.*

.. code-block:: cpp

    cv::Mat ObjCourse::mainProcess(cv::Mat& img)

**Возвращаемое значение:**
- Обработанное изображение с отмеченными объектами

Расчет курса
~~~~~~~~~~~~
*Определяет угол между центром кадра и обнаруженным объектом.*

.. code-block:: cpp

    float ObjCourse::getObjectCourse(cv::Mat frame, double frameWidth, double cameraAngle)

**Параметры:**
- ``frame`` - входное изображение
- ``frameWidth`` - ширина кадра
- ``cameraAngle`` - угол обзора камеры

**Возвращаемое значение:**
- Угол отклонения объекта от центра (в градусах)

**Вспомогательные функции:**

Предобработка изображения
~~~~~~~~~~~~~~~~~~~~~~~~~
*Подготавливает изображение для подачи в нейронную сеть.*

.. code-block:: cpp

    std::vector<cv::Mat> ObjCourse::preProcess(cv::Mat& img, cv::dnn::Net& net)

Постобработка результатов
~~~~~~~~~~~~~~~~~~~~~~~~~
*Анализирует выход нейронной сети и выделяет обнаруженные объекты.*

.. code-block:: cpp

    cv::Mat ObjCourse::postProcess(cv::Mat& img, std::vector<cv::Mat>& outputs, const std::vector<std::string>& classNames)

Отрисовка меток
~~~~~~~~~~~~~~~
*Добавляет подписи к обнаруженным объектам на изображении.*

.. code-block:: cpp

    void ObjCourse::drawLabel(cv::Mat& img, std::string label, int left, int top)

**Технические параметры:**

- ``_inputWidth``, ``_inputHeight`` - размеры входного изображения для нейросети
- ``_scoreThreshold`` - порог уверенности для детекции
- ``_nmsThreshold`` - порог для подавления немаксимумов
- ``_confidenceThreshold`` - минимальный уровень достоверности
- ``_cameraAngle`` - угол обзора камеры