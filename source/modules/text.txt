Пример использования аугментации изображений 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Модуль включает три основных этапа обработки данных: загрузку изображений, указание методов аугментации, сохранение результатов преобразования.
На первом этапе осуществляется загрузка входных изображений в вектор с использованием функции ``cv::imread``.


.. code-block:: cpp

    std::vector<cv::Mat> inputImagesAugmetation(10);
    inputImagesAugmetation[0] = cv::imread("files\\img0.jpg", cv::IMREAD_COLOR);
    inputImagesAugmetation[1] = cv::imread("files\\img1.jpg", cv::IMREAD_COLOR);
    ...
    inputImagesAugmetation[9] = cv::imread("files\\img9.jpg", cv::IMREAD_COLOR);

На этапе задания методов аугментации задаются названия методов, которые будут применяться к входным изображениям. В качестве методов преобразования могут выступать: поворот изображения на 45, 90, 270 или 315 градусов; зеркальное отображение по горизонтали, вертикали или по обоим направлениям.
Ниже приведены методы аугментации изображений:

.. code-block:: cpp

    std::vector<mrcv::AUGMENTATION_METHOD> augmetationMethod = {
    mrcv::AUGMENTATION_METHOD::ROTATE_IMAGE_90,
    mrcv::AUGMENTATION_METHOD::FLIP_HORIZONTAL,
    mrcv::AUGMENTATION_METHOD::FLIP_VERTICAL,
    mrcv::AUGMENTATION_METHOD::ROTATE_IMAGE_45,
    mrcv::AUGMENTATION_METHOD::ROTATE_IMAGE_315,
    mrcv::AUGMENTATION_METHOD::ROTATE_IMAGE_270,
    mrcv::AUGMENTATION_METHOD::FLIP_HORIZONTAL_AND_VERTICAL};

Далее осуществляется вызов функции аугментации в формате

.. code-block:: cpp

    int state = mrcv::augmetation(inputImagesAugmetation, outputImagesAugmetation, augmetationMethod);

После выполнения всех операций, модифицированные изображения сохраняются на диск с использованием функции ``cv::imwrite(ss.str(), resultImage)``

Результат работы функции аугментации :

.. rst-class:: inline-images

.. image:: /_static/augmentation1.jpg
   :alt: Пример результата обработки
   :width: 200px

.. image:: /_static/augmentation2.jpg
   :alt: Пример результата обработки
   :width: 200px

.. image:: /_static/augmentation3.jpg
   :alt: Пример результата обработки
   :width: 200px

Пример использования кластеризации
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

*Реализует алгоритмы кластеризации 3D-точек на основе данных стереокамер.*

**Загрузка данных**

*Загружает данные для кластеризации из файла.*

.. code-block:: cpp

    void mrcv::DenseStereo::loadDataFromFile(const std::string& filename)

**Выполнение кластеризации**

*Выполняет кластеризацию загруженных данных.*

.. code-block:: cpp

    void mrcv::DenseStereo::makeClustering()


Пример использования детектирования объектов
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

*Реализует функционал для автоматического обучения детектора объектов.*

**Инициализация детектора**

*Инициализирует детектор с заданными параметрами.*

.. code-block:: cpp

    void mrcv::Detector::Initialize(
        int device,
        int width,
        int height,
        const std::string& classesFile
    )

**Автоматическое обучение**

*Выполняет автоматическое обучение модели детектора.*

.. code-block:: cpp

    void mrcv::Detector::AutoTrain(
        const std::string& datasetPath,
        const std::string& imageExtension,
        const std::vector<int>& epochs,
        const std::vector<int>& batchSizes,
        const std::vector<float>& learningRates,
        const std::string& pretrainedModel,
        const std::string& outputModel
    )

Пример использования предобработки изображений
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Для подготовки входных параметров функции предобработки ``preprocessingImage()`` производится загрузка исходного изображения:

.. code-block:: cpp

    cv::Mat imageIn;
    cv::Mat imageOut;    
    imageIn = cv::imread("./files/seabed.png", cv::IMREAD_COLOR);
    imageOut = imageIn.clone();
    mrcv::writeLog("\t imageIn channels = " + std::to_string(imageIn.channels()));

Формируется список применяемых методов предобработки:

.. code-block:: cpp

    std::vector<mrcv::METOD_IMAGE_PERPROCESSIN> metodImagePerProcessinBrightnessContrast = {
        mrcv::METOD_IMAGE_PERPROCESSIN::NOISE_FILTERING_01_MEDIAN_FILTER,
        mrcv::METOD_IMAGE_PERPROCESSIN::BALANCE_CONTRAST_10_LAB_CLAHE,
        mrcv::METOD_IMAGE_PERPROCESSIN::SHARPENING_02,
        mrcv::METOD_IMAGE_PERPROCESSIN::BRIGHTNESS_LEVEL_DOWN,
        mrcv::METOD_IMAGE_PERPROCESSIN::NONE,
        mrcv::METOD_IMAGE_PERPROCESSIN::CORRECTION_GEOMETRIC_DEFORMATION,
    };

Далее, применяется функция предобработки:

.. code-block:: cpp

    int state = mrcv::preprocessingImage(imageOut, metodImagePerProcessin, "./files/fileCameraParameters.xml");

Сохранение результата в файл:

.. code-block:: cpp

    cv::String imageOutputFilePath = "./files/outImages/test.png";
    cv::imwrite(imageOutputFilePath, imageOut);
    mrcv::writeLog("\t результат преодобработки сохранён: " + imageOutputFilePath);

Отображение результатов на экране:

.. code-block:: cpp

    double CoefShowWindow = 0.5;
    cv::resize(imageIn, imageIn, cv::Size(double(imageIn.cols * CoefShowWindow),
                                          double(imageIn.rows * CoefShowWindow)), 0, 0, cv::INTER_LINEAR);
    cv::resize(imageOut, imageOut, cv::Size(double(imageOut.cols * CoefShowWindow),
                                            double(imageOut.rows * CoefShowWindow)), 0, 0, cv::INTER_LINEAR);
    cv::namedWindow("imageIn", cv::WINDOW_AUTOSIZE);
    imshow("imageIn", imageIn);
    cv::namedWindow("imageOut", cv::WINDOW_AUTOSIZE);
    imshow("imageOut", imageOut);
    cv::waitKey(0);

Результаты предобработки подводных изображений:

.. image:: /_static/preprocessing.jpg
   :alt: Исходное изображение, результат предобработки
   :width: 200px
   :align: center

Пример фрагмента log-файла во время запуска примера:

.. code-block:: text

    16:59:43 | INFO |  === НОВЫЙ ЗАПУСК === 
    16:59:43 | INFO | загружено изображение: ./files/img02.jfif :: 960x600x3
    16:59:43 | INFO | imageIn.channels = 3
    16:59:43 | INFO | NOISE_FILTERING_01_MEDIAN_FILTER, state = 0
    16:59:43 | INFO | BALANCE_CONTRAST_10_LAB_CLAHE, state = 0
    16:59:43 | INFO | SHARPENING_02, state = 0
    16:59:43 | INFO | BRIGHTNESS_LEVEL_DOWN, state = 0
    16:59:43 | INFO | CORRECTION_GEOMETRIC_DEFORMATION, state = 0
    16:59:43 | INFO | Предобработка изображения завершена (успешно)
    16:59:43 | INFO | результат предобработки сохранён: ./files/img02.jfif
