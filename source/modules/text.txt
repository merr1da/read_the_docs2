Пример использования аугментации изображений 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Модуль включает три основных этапа обработки данных: загрузку изображений, указание методов аугментации, сохранение результатов преобразования.
На первом этапе осуществляется загрузка входных изображений в вектор с использованием функции ``cv::imread``.


.. code-block:: cpp

    std::vector<cv::Mat> inputImagesAugmetation(10);
    inputImagesAugmetation[0] = cv::imread("files\\img0.jpg", cv::IMREAD_COLOR);
    inputImagesAugmetation[1] = cv::imread("files\\img1.jpg", cv::IMREAD_COLOR);
    ...
    inputImagesAugmetation[9] = cv::imread("files\\img9.jpg", cv::IMREAD_COLOR);

На этапе задания методов аугментации задаются названия методов, которые будут применяться к входным изображениям. В качестве методов преобразования могут выступать: поворот изображения на 45, 90, 270 или 315 градусов; зеркальное отображение по горизонтали, вертикали или по обоим направлениям.
Ниже приведены методы аугментации изображений:

.. code-block:: cpp

    std::vector<mrcv::AUGMENTATION_METHOD> augmetationMethod = {
    mrcv::AUGMENTATION_METHOD::ROTATE_IMAGE_90,
    mrcv::AUGMENTATION_METHOD::FLIP_HORIZONTAL,
    mrcv::AUGMENTATION_METHOD::FLIP_VERTICAL,
    mrcv::AUGMENTATION_METHOD::ROTATE_IMAGE_45,
    mrcv::AUGMENTATION_METHOD::ROTATE_IMAGE_315,
    mrcv::AUGMENTATION_METHOD::ROTATE_IMAGE_270,
    mrcv::AUGMENTATION_METHOD::FLIP_HORIZONTAL_AND_VERTICAL};

Далее осуществляется вызов функции аугментации в формате

.. code-block:: cpp

    int state = mrcv::augmetation(inputImagesAugmetation, outputImagesAugmetation, augmetationMethod);

После выполнения всех операций, модифицированные изображения сохраняются на диск с использованием функции ``cv::imwrite(ss.str(), resultImage)``

Результат работы функции аугментации :

.. rst-class:: inline-images

.. image:: /_static/augmentation1.jpg
   :alt: Пример результата обработки
   :width: 200px

.. image:: /_static/augmentation2.jpg
   :alt: Пример результата обработки
   :width: 200px

.. image:: /_static/augmentation3.jpg
   :alt: Пример результата обработки
   :width: 200px

Пример использования кластеризации
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

*Реализует алгоритмы кластеризации 3D-точек на основе данных стереокамер.*

**Загрузка данных**

*Загружает данные для кластеризации из файла.*

.. code-block:: cpp

    void mrcv::DenseStereo::loadDataFromFile(const std::string& filename)

**Выполнение кластеризации**

*Выполняет кластеризацию загруженных данных.*

.. code-block:: cpp

    void mrcv::DenseStereo::makeClustering()


Пример использования детектирования объектов
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

*Реализует функционал для автоматического обучения детектора объектов.*

**Инициализация детектора**

*Инициализирует детектор с заданными параметрами.*

.. code-block:: cpp

    void mrcv::Detector::Initialize(
        int device,
        int width,
        int height,
        const std::string& classesFile
    )

**Автоматическое обучение**

*Выполняет автоматическое обучение модели детектора.*

.. code-block:: cpp

    void mrcv::Detector::AutoTrain(
        const std::string& datasetPath,
        const std::string& imageExtension,
        const std::vector<int>& epochs,
        const std::vector<int>& batchSizes,
        const std::vector<float>& learningRates,
        const std::string& pretrainedModel,
        const std::string& outputModel
    )

