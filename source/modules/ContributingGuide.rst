Руководство для контрибьюторов
==============================

Это руководство предназначено для разработчиков и пользователей, желающих внести вклад в развитие библиотеки **Marine Robotics Computer Vision (MRCV)**. Ниже представлены инструкции по установке зависимостей, сборке проекта и рекомендации по работе с CUDA.

Датасет изображений для работы с библиотекой доступен по ссылкам:

- `code-ai-400393-image-dataset.7z <https://disk.yandex.ru/d/TxReQ9J6PAo9Nw>`_
- `code-ai-400393-huggingface <https://huggingface.co/datasets/saigon-89/code-ai-400393>`_

Получение исходного кода
~~~~~~~~~~~~~~~~~~~~~~~~

Исходный код библиотеки доступен на внутреннем репозитории. Клонируйте проект:

.. code-block:: bash

   git clone --branch main https://github.com/valabsoft/code-ai-400393.git

Необходимые зависимости для установки библиотеки mrcv
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Для корректной работы библиотеки все необходимые зависимости должны быть установлены в соответсвии с разделом руководства "Установка и настройка зависимостей".

Инструкция по установке Windows/Linux версии библиотеки mrcv
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Для сборки библиотеки на системах Windows или Linux (Ubuntu) необходимо воспользоваться инструкцией из раздела руководства "Установка и первоначальная настройка библиотеки".

Инструкция по установке python версии библиотеки mrcv
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Проверьте, установлен ли Python::

    python3 --version

Если Python отсутствует, установите его::

    sudo apt-get update
    sudo apt-get install python3

Для клонирования репозитория с GitHub потребуется Git::

    git --version

Если Git не установлен, выполните::

    sudo apt-get install git

Склонируйте репозиторий с ветки main::

    git clone --branch main https://github.com/valabsoft/code-ai-400393.git

Это создаст локальную копию репозитория на вашем устройстве.

Перейдите в локальный репозиторий::

    cd code-ai-400393/python

Рекомендуется использовать виртуальное окружение для изоляции зависимостей:

Создайте виртуальное окружение с именем venv::

    python3 -m venv venv

Активируйте окружение::

    source venv/bin/activate

После этого в терминале появится (venv), что указывает на активное окружение.

В директории есть файл requirements.txt с необходимыми библиотеками:

Если файл находится в корневой директории::

    pip install -r requirements.txt

Установите вашу библиотеку::

    pip install -e .

Перейдите в директорию с примерами

В директории есть папка examples::

    cd python/examples

Выберите папку модуля и запустите пример. Убедитесь, что в папке примера есть файлы с которыми будет работать пример::

    cd python/examples/comparing/
    python comparing.py

Оформление изменений
~~~~~~~~~~~~~~~~~~~~

Перед отправкой изменений:

1. **Форкните репозиторий** и создайте отдельную ветку для каждой задачи.
2. **Не объединяйте** несвязанные изменения в одном pull request.
3. **Багфиксы** — на ветках от стабильной версии; **новые фичи** — от `main`.

.. code-block:: bash

   git checkout -b fix-crash-in-detector main

4. Убедитесь, что вы:
   - написали/обновили тесты;
   - обновили документацию;
   - добавили вас в `CHANGELOG.md` (если он есть).

Репорты об ошибках
~~~~~~~~~~~~~~~~~~

Перед отправкой:

- Обновитесь до последней версии библиотеки.
- Проверьте, повторяется ли ошибка на старых версиях.
- Проверьте зависимости: версии OpenCV, LibTorch и др.
- Найдите похожие тикеты/обсуждения.

При оформлении тикета:

- Укажите ОС, версию компилятора, сборки библиотек.
- Приложите минимальный пример кода с воспроизведением ошибки.
- Включите логи и команды запуска.
  
Рекомендации по контрибьюции
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

- Пишите понятный и документированный код.
- Используйте стиль оформления, принятый в библиотеке.
- Обновляйте документацию при добавлении новых функций.
- Проверяйте кросс-платформенность (Windows/Linux, CPU/CUDA).
- Перед публикацией изменений убедитесь, что они не нарушают сборку библиотеки.
